CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_Create_DB`(
	IN v_Database         VARCHAR(50),
    IN v_SP_Create_Tables VARCHAR(50)
)
BEGIN
	DECLARE v_status_msg VARCHAR(255);
    
	IF NOT sys.fx_DB_Exist( v_Database) THEN
		CALL sys.SP_SQL_Exec( CONCAT( 'CREATE DATABASE `', v_Database, '`' ), @ok );
        IF @ok THEN
			SET v_status_msg = CONCAT('Banco de dados ', v_Database, ' criado com sucesso!');
		ELSE
			SET v_status_msg = CONCAT('Erro ao criar o banco de dados ', v_Database);
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = v_status_msg;
		END IF;
    ELSE
        SELECT CONCAT('Banco de dados ', v_Database, ' já existe.') AS status_msg;
    END IF;
    -- CALL SP_Create_DB_Tables( v_Database, v_SP_Create_Tables );		-- Cria as tabelas do banco

	-- Altera tabela Calendario
	IF v_SP_Create_Tables IS NOT NULL AND v_SP_Create_Tables <> '' THEN
        SET @comando := CONCAT('CALL ', v_Database, '.', v_SP_Create_Tables, '()');
        CALL sys.SP_SQL_Exec(@comando, @ok);

        IF NOT @ok THEN
            SET v_status_msg = CONCAT('Erro ao executar ', v_SP_Create_Tables, ' no banco ', v_Database);
			SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = v_status_msg;
        END IF;
    END IF;

    -- Altera a tabela t_calendario para reconfigurar a coluna NUM_INDEX e criar o índice
	SET @comando := CONCAT(
		'ALTER TABLE `', v_Database, '`.`t_calendario` ',
		'MODIFY `NUM_INDEX` SMALLINT AUTO_INCREMENT NOT NULL ',
		'ADD CONSTRAINT idx_Num_Index UNIQUE ( NUM_INDEX )'
	);
    select @comando;
   CALL sys.SP_SQL_Exec( @comando, @ok );
    IF @ok THEN
        SET v_status_msg = concat( 'Coluna: [', v_Database, '.t_calendario.NUM_INDEX] alterada com sucesso' );
		CALL sys.SP_Record_LOG( v_Database, 't_calendario', 'NUM_INDEX', 'CHAR(1)', 'SMALLINT AUTO_INCREMENT', v_status_msg );
    ELSE
        SET v_status_msg = concat( 'Falha ao alterar Coluna: [', v_Database, '.t_calendario.NUM_INDEX]. Verificar!!!' );
		CALL sys.SP_Record_LOG( v_Database, 't_calendario', 'NUM_INDEX', 'CHAR(1)', 'SMALLINT AUTO_INCREMENT', v_status_msg );
		SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = v_status_msg;
    END IF;
END

CREATE DEFINER=`root`@`localhost` PROCEDURE `SP_SQL_Exec`(
    IN  v_command TEXT,
    OUT v_result  BOOLEAN
)
BEGIN
	DECLARE CONTINUE HANDLER FOR SQLEXCEPTION

    SET v_result = FALSE;

    IF sys.fx_SQL_Valid(v_command) THEN
        SET @sql := v_command;

        PREPARE stmt FROM @sql;
        EXECUTE stmt;
        DEALLOCATE PREPARE stmt;

        SET v_result = TRUE;
    END IF;
END

CREATE DEFINER=`root`@`localhost` FUNCTION `fx_SQL_Valid`(
	v_command TEXT
) RETURNS tinyint(1)
    DETERMINISTIC
BEGIN
    RETURN v_command IS NOT NULL AND LENGTH(TRIM(v_command)) > 0;
END